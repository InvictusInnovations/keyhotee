/**
@defgroup wallet_specification BitShares Wallet High-Level Specification
@brief Desired functionality and algorithms used for bitshares wallet

# Wallet Functionality
Every wallet stores data encrypted in a level_db database
  - index -1 is reserved for the master private key
  - index -2 -> -200 million are reserved for non-hiearchial keys
  - the first 100 million records are reserved for contact ids
  - the second 100 million records are reserved for name ids
  - the third 100 million records are reserved for asset ids
  - the forth 100 million records are reserved for transaction ids

Every wallet has access to various items in the blockchain
  - assets issued by this wallet
  - balances controlled by this wallet
  - names registered to this wallet
  - transactions involving private keys known to this wallet

Every wallet mantains a set of 'contacts'
  - a contact is someone with whom that wallet sends or receives transactions
  - keys for contacts are generated using a hierarchial deterministic wallet
  - tracks the hierarchial key indexes for sending/receiving from this contact



The user workflow is as follows:

   UserA
      create_wallet
      userb_record = create_contact( "UserB" )
      send UserB userb_record.extended_recv_key
      recv extended_recv_key from UserB
      set_contact_extended_send_key( userb_ext_key );

      send_to_contact( "UserB", "ammount" );


on receive block:
   does it extend the current head ?
      attempt to push it....
          if it fails discard it.
   are there missing blocks in the recent history (past 100 blocks)
      is this block one of those missing blocks?
          start a new fork and cache incase the fork grows
      does this block build off of one of the forks?
          cache and note fork length.
          if fork length > current head
             pop blocks back to fork origin
             apply blocks forward
                if applied block fails, discard blocks that build upon it
                   revert back to the original fork.
   if any block fails to apply note the delegate that signed it and flag their record
   if any delegate signs two blocks for the same timeslot create a transaction to fire them


every BLOCK_INTERVAL
   check to see if we should produce this block..
      if so produce it... and broadcast it

on receive transaction
   put into pending trx queue in chain_database

on push block...
   if timestamp is 'now' then check all pending transactions more than BLOCK_INTERVAL/2 old that were not included in the block... and note in the delegates record.
      note how many transactions were included that were not in your pending queue...
      delegate stats should be kept in the chain database





## JSON RPC API Overview
All commands are issued to the wallet via its JSON-RPC interface. For example, the wallet's command-line interface parses commands entered by the user and generates RPC calls to the underlying wallet backend. The API for the wallet's JSON RPC interface is described in a separate section near the end of this document. The JSON-RPC standard itself is described here: http://json-rpc.org/. Web-based interfaces to the wallet will directly communicate with the wallet engine via this RPC interface.

## Passwords
A wallet potentially has two passwords: a "wallet password" that unencypts the wallet for basic reporting of wallet status (balances, transactions, etc) and a "spending password" that unencrypts the private keys so that the user can issue transactions to spend currency in the wallet.

A wallet password is not required by the wallet. If the wallet password is left blank, the wallet file (which contains a cache of the wallet status such as wallet-affecting transactions, etc) will be stored in human-readable JSON form. If a wallet password is required by the wallet, no commands can be performed on the wallet until the wallet password is provided.

A spending password is required by the wallet, and it must be at least 8 characters in length. If the user attempts an operation that requires access to the private keys when the keys are not in memory (keys are not held in memory by default), the wallet will automatically generate a request for the spending password. Once the spending password is entered, the wallet will unencrypt the private keys and keep them in memory until a timeout occurs (by default we will use a 5 minute timeout if the user doesn't specify one).


## TODO: Wallet accounts and address memos
The bitshares wallet supports accounts similar to the accounts supported by the bitcoin wallet. Multiple addresses can be attached to a specific account (an account must contain at least one address). Accounts can be used to control what addresses are used as a set of inputs for a transaction and to manage several different balances within a wallet (for example, the same way accounts are used in an accounting package). An address can only be owned by a single account. If an account is not specified when creating or importing the address, the address will be owned by the default account called "". An address's account can be changed by using the setaccount method.

The bitshares wallet also supports the concept of "address memos". An address memo is a comment attached to a specific address. Address memos are primarily useful as a means of documenting the sources of funds in an account.

When you create a new "receive address" with the "getnewaddress" command, you can optionally specify an account (which may or may not exist yet) and a memo. Similarly, when importing a private key, you can specify an account and a memo if you wish.



## Create a transaction cache for transactions that affect user's wallet (e.g. wallet balance)
This cache is built by scanning the blockchain and processing pending transactions (currently only processes blockchain transactions, pending transactions support needs to be added). We'll keep blockchain transactions and pending transactions in separate containers as they need to be managed somewhat differently.

## Compute Confirmed Balance
A transaction is fully confirmed when it's been included into a block that 51% of the delegates have confirmed by issuing follow-on blocks that point back to that block (via the block hash id pointers). Currently this is computed on the fly from the transaction cache. Note: currently code considers all transactions in a block to be confirmed.

## Compute Unconfirmed Balance
Transactions that are not yet fully confirmed are kept in a separate wallet balance (one for each asset type) until they have been fully confirmed. Currently this is computed on the fly from the transaction cache (well, not actually computed at all yet, this needs to be implemented).

## Create transactions from user accounts
- Pick an appropriate set of unspent outputs to act as inputs to the transaction (see pseudocode for description of current algorithm for selecting this set).
- Transfer any overage to a “change” account. Create a new change account for each transaction and ouptut the overage to this account. This implies the user may end up holding a substantial and ever-growing number of keys (see Change addresses discussion).
- Compute any fees required for the transaction and add additional unspent outputs as inputs if required (which changes the fee required again and can in turn require additional inputs...). The minimum fee for a valid transaction is the next_fee (computed by blockchain code, see blockchain.dox for details) * transaction_size_in_bytes. See "Transaction Fee Issues" for potential problems with this approach to fee calculation for the transaction.
- If no change required (an unlikely scenario), remove the change output. Probably we should remove the key we created as well in this case.
- Randomize the ordering of the outputs //TODO
- Report if insufficient funds to perform the transaction
- Submit transaction to the p2p network

## Change addresses
We create one change address (key pair) for every transaction (regardless of whether it's used or not in the transaction). This may work acceptably for human-operated wallets, but it's not a sound strategy for anything that generates transactions in an automated fashion since too many keys will end up being created and stored. This implies we'll want to supply an rpc call that supports generating multi-output transactions so that the rpc client application can generate it's own change addresses (and therefore re-use existing change addresses instead of having to create a new one for each transaction).

We could also potentially prune change address keys when they are "spent", as there should be no reasonable expectation of these being outputs in future transactions (only "receiving addresses" explicitly generated by the user should be expected to receive future payments).

## Transaction Fee Issues

It's possible that a wallet may compute a transaction without having seen the "latest" block (or even several blocks), in which case it's possible the fee_rate could have increased, which could lead to the wallet generating a transaction that won't be accepted by peers (if they've seen the block) or not put into the blockchain. With the current fee algorithm, the fee rate can only increase by 2% per block generated, so we can workaround this issue by paying 110% of the fee (this would allow us to miss 5 blocks all with maximum increases in the fee_rate and still generate a transaction with an acceptable fee for the network).

## Processing transactions in a block
- Check each transaction in a block to see if it affects the user's wallet.

## Process user-created pending transactions
- Process each transaction as locally confirmed (shows in confirmed balance, but transaction itself shows as unconfirmed).

## Process peer-received pending transactions
- Process each transaction as  unconfirmed (shows in unconfirmed balance and transaction shown as unconfirmed).

## Steps in processing a basic currency transaction
- If any of the inputs to the transaction are from accounts we control, decrease the wallet balance by the amount in those accounts (accounts are fully spent by a transaction and any overage is sent to a “change” account as an output of the transaction)
- If any of the outputs to the transaction are to accounts we control, increase the wallet balance by the amounts transferred to those accounts)

Vote down delegates when there is a valid transaction not getting included in the blockchain for more than one block from the time you receive it. For now we will just log this as a diagnostic aid.

## Methods of canceling locally-created transactions
If a transaction has been generated locally but not yet submitted to the p2p network, it can simply be removed from the pending transaction queue.

If a transaction has already been submitted to the network but not yet accepted into a block, it can potentially be canceled by issuing a transaction with a higher fee that double spends one of the inputs of the transaction to be canceled. If this canceling transaction manages to make it to the block generating delegate before the block is created, it will get ranked higher in the transaction list and therefore invalidate the original transaction we want to cancel.

## Processing an invalidated transaction
- Transaction can be invalid due to double-spend of an input
- Transaction can be invalid because its inputs and outputs doen't add up to 0
- TODO: Check code for more ways a received transaction can be rejected as invalid

## Miscellaneous information to report
- List configurable number of recent transactions
- List of pending transactions
- List of named receiving addresses (for incoming transfers)
- List of named addresses to send to (address book for outgoing transfers)
- Add number of confirmations and “delegate voted for” to transaction display
- Report the total number of transactions (confirmed and unconfirmed) that affect the user's wallet (size of transaction cache).

## Importable/Exportable information
- import/export private keys in same format as bitcoin (bitcoin wallet import format).Export wallet in json (this is the default format for the wallet, but the client may need to unencrypt the wallet back to JSON if a wallet passphrase was specified by the user).

## Other features
- Sign a message
- Verify a message
- Set/Verify Wallet Passphrase (none by default)
- Set/Verify Spending Passphrase

## Transaction output claim types
- claim_by_signature_output: claim by owning a bitshares private key that matches public key referenced in the output
- claim_by_pts_output: claim by owning a PTS private key that matches public key referenced in the output (these are only used for initial genesis block allocations)
- claim_name_output: find the registered delegate public key that matches public key referenced in the output.

## Transaction Fee
The transaction fee rate is calculated in the blockchain code and stored into the previous block as "next fee". Fee is validated by all full clients, so the generating delegate can't place an arbitrarily high fee to lock up the network. This means the fee doesn't
actually have to be included in the blockchain, but it's included for now for potential use of some sort by a lightweight client or if old blocks have been discarded from the blockchain.

## Possible ways to annotate a transaction received by the wallet
- Check addresses receiving or sending the money against our "send_to" and "receiving_addresses".
- For receiving addresses, can also show the memo tied to account that contains the address.

## Possible ways to annotate a transaction generated in the wallet
Everything in the above section ("received by the wallet") can be used to document the transaction, plus a user can add a memo to indicate the purpose of the specific transaction when he generates it. There's also some interesting documentation possibilities here for when we generate a series of transactions using the contact authorization system of shared public key generation.

To summarize, we can annotate the following information to a transaction:
transaction memo (only for transactions generated in this wallet), sending account memo, sending address memo, and receiving address memo.


## Wallet GUI additional features
- Display table of all transactions sortable by different column fields


# Detailed BitShares Wallet pseudocode

Major functions:
1) collecting inputs for generating transactions from a specific account or set of accounts
2) generating confirmed and unconfirmed balances for the accounts (there's actually multiples assets for each account)
3) maintaining lists of transactions and pending transactions
4) unwinding pending transactions and blockchain transactions that are rejected. We need to remove these from the unspent outputs of the addresses so that we will no longer count them as unconfirmed balances.

Two types of data in unconfirmed transactions: money in (can't trust for collecting transaction inputs) and money out (should trust for collecting transaction inputs as outputs that have already been spent).

transaction_state: contains effects of a single transaction on the wallet(trx field is the "input" with the broadcast transaction data). We make a transaction_state for each transaction that impacts the various wallet balances (and potentially other states of the wallet if the blockchain supports other types of transactions, although these should possibly be stored in a separate container if needed if they don't affect wallet balance computation also).

new data members for wallet:

_block_transactions: map of transactions in blockchain that affect wallet. These get added by scanning blockchain (whenever we receive a new block) and are never removed (except if block is rejected later). This map just grows larger with time,so it should be handled by database eventually. These transactions may or may not yet be confirmed transactions, depending on how many blocks we have received since the block that included them.


_pending_transactions: transactions not yet in a block. These get added whenever we generate or receive a transaction. They get removed whenever we find them in a block we are scanning (at that point we're moving them to _block_transactions database).
These can't possibly be confirmed transactions, no need to check.
These transactions are primarily used for computing unconfirmed balances, they're not used for either confirmed balances or collecting inputs to fund transactions.  But we still need to accumulate these outputs as they affect the unconfirmed balance of each address. We will need to add them to unspent_balances. We're using a map for the unspent outputs, so we shouldn't need to worry about duplicates when they get added again later when the pending transaction is finally included into a block.

Also these transactions spend our unspent_outputs, so we do need to remove spent outputs from unspent_outputs if they are there: this may or may not have already been done, depending on whether this is a locally generated transaction that we later receive. If we generate it locally, we should account for it when we generate it. If it was a remotely generated transaction from another of our wallets, this is first time this wallet learns about the transaction and it needs to remove it from unspent_outputs. Possibly we could check some map to see if the pending transaction has already been processed, but it shouldn't be a common case (most pending transactions we receive will be from others, not ourselves), so maybe not necessary, needs further thought/investigation. Wallet needs to add new function that can be called by client code when a transaction is received (we'll call this same function when we locally generate a transaction).

Every time we receive a block, initially all it's transactions will be unconfirmed. But the reception of this block will also confirm a block we've previously received. So if we were accumulating balances, we would use the newly received block to modify our unconfirmed balances and use the confirmed block to modify all our confirmed balances (and revert all associated unconfirmed balances). But for now, we'll compute all the balances on request (see compute_balances function), so we don't need to worry about this additional complexity.

struct account
  set<address_state> addresses //we uniquify address_state based on address public key
  balance?
  unconfirmed_balance?
// Add an address to addresses member whenever we create a new address or move it to a different account. Should we have an option to delete an account? I suppose an account is implicitly deleted when all addresses are removed from it. Also, all addresses should belong to some account (there is a default account ("") that should be used when an address is created without specifying an account).

We need to track the unspent_outputs of an account to quickly collect inputs for transactions drawn from that account. The simplest way to do this is to draw from a conceptual union of the unspent_outputs of each address in the account (this simplifies switching addresses between accounts or even deleting an address from consideration entirely if desired).

map<address,outputs> _unspent_outputs_of_address;
//Defines mapping from address to it's unspent outputs.
Add output to outputs subcontainer whenever we scan a transaction that outputs to the address(scan_output). What about outputs from pending transactions? Let's not add these yet, but instead wait until they've been included in a block (this will happen as part of normal block processing, no need for extra code). Inputs from pending transactions will call mark_as_spent to remove the associated outputs from _unspent_outputs. Eventually we also need to deal with cleaning out transactions coming from blocks that have been rejected (blockchain fork rollback).
Remove from outputs subcontainer whenever we mark_as_spent.

Invalidating a pending transaction:  need to handle when a pending transaction is canceled/invalidated by another transaction in a new block that spends one of the inputs to our pending transaction.
We detect this by submitting all pending transactions to blockchain.evaluate_transaction() whenever we receive a new block.

Handling an invalidated transaction:
1) we need to re-add any of the transaction inputs' outputs back to _unspent_outputs_of_address for their owning address (money wasn't spent because transaction was invalidated) (except any outputs spent by the "invalidating transaction", of which there should be at least one). TODO: How to handle the overlap of spending inputs between the transaction and the invalidating transaction?
2) we need to remove any of the transaction's outputs from _unspent_outputs_of_address for their owning address (money wasn't delivered because transaction was invalidated).

We also want to record any invalidated transactions.
We're not going to consider invalidation between pending transactions.

//address_state: this is only needed if we want to maintain running balances, but it simplifies many possible later changes if we implement it now. We may want to change the _unspent_outputs_of_address to map to these objects instead of outputs and add outputs as a member of this address state object.
struct address_state
  address
  memo
  account?
  balance?
  unconfirmed_balance?
//do we need to map from addresses to their owning account? If so, we could store it in a field of the address_state object.

The scan_output function scans pending and blockchain transactions. We always add outputs we find here
to unspent outputs, but we should only add outputs that are from confirmed transactions now.
Can such an output have already been spent (so it shouldn't be added)? It couldn't have been spent by this wallet, but maybe another wallet could have spent it if it had already processed the block as confirmed a little before we do, then issued out the spending transaction which we then receive and process before processing the original funding transaction in the block. This is an unlikely scenario, but it may be a hole we need to close in the future.

In the current code, spent_outputs is being used to determine if an output is an output we control for balance calculations. But this can be done by checking output_ref_to_index (or output_index_to_ref). Do we have any need to keep track of spent_outputs? Maybe for assertion checking? Looks like not needed, remove.

receive_addresses: these are public keys we control that may be referenced in transaction endpoints. They have no balances until a transaction specifies an output to a receive address.

output_reference type: points to an output as (transaction_hash, output_index_in_transaction)

output_index type: points to an output as (block_number,transaction_index_in_block, output_index_in_transaction)
//For efficiency reasons, the wallet maps outputs as output_indexes. This allows sorting via block number so that older unspent outputs will be found first collecting unspent outputs to spend when generating a transaction. Note that pending transactions don't have a block and can't be looked up this way, but we should never try to spend an output from a pending transaction, so this should be ok.

unspent_outputs: this container points to transaction outputs in a transaction whose amounts have been transferred to an address we control (and not yet spent). We keep one for each receiving address, and we use it both for collecting inputs for transactions we're generating and for computing confirmed and unconfirmed balances for the address, owning accounts, and the overall wallet (for each asset type).

## General Notes
- Generation of transactions (transfer) could be speeded up a lot (there's a lot of potential for re-doing old work when the fees require more inputs to the transaction), but probably we don't care right now.

## Things to do (lots to be added here)
- Function to generate unconfirmed balances from pending transactions for each asset type
- Report partial confirmation of blockchain transactions
- Randomize outputs of generated transactions
- Increase fee paid for transactions to avoid transaction not getting accepted if there are one or more "unseen blocks" on network with increased fee rates.

# Wallet command-line options (options when launching wallet)
