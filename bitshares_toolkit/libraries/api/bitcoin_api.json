{
  "category" : "Bitcoin Compatibility",
  "methods"  : [
      {
           "method_name" : "bitcoin_getaccountaddress",
           "description" : "Returns a current bitshare address for receiving payments to this account. If <account_name> does not exist, it will be created along with an associated new address that will be returned.",
           "return_type"  : "address",
           "parameters" : [
                 {
                    "name" : "account_name",
                    "type" : "account_name",
                    "description" : "the account's name associated with this address"
                 }
              ],
           "prerequisites" : ["json_authenticated", "wallet_open"],
           "aliases" : [ "getaccountaddress" ]
      },
      {
           "method_name" : "bitcoin_getaccount",
           "description" : "Returns the account associated with the given address.",
           "return_type"  : "account_record",
           "parameters" : [
                 {
                    "name" : "account_address",
                    "type" : "address",
                    "description" : "the address of this account"
                 }
              ],
           "prerequisites" : ["json_authenticated", "wallet_open"],
           "aliases" : [ "getaccount" ]
      },
      {
          "method_name" : "bitcoin_dumpprivkey",
          "description" : "Reveals the private key corresponding to <bitsharesaddress>",
          "return_type"  : "std::string",
          "parameters" : [
          {
              "name" : "account_address",
              "type" : "address",
              "description" : "bitshares address of the private key, base58 string hash of public key"
          }
          ],
          "prerequisites" : ["json_authenticated", "wallet_open", "wallet_unlocked"],
          "aliases" : [ "dumpprivkey" ]
      },
      {
          "method_name" : "bitcoin_encryptwallet",
          "description" : "Encrypts the wallet with <passphrase>.",
          "return_type"  : "void",
          "parameters" : [
          {
              "name" : "passphrase",
              "type" : "std::string",
              "description" : "the passphrase for encrypt"
          }
          ],
          "prerequisites" : ["json_authenticated", "wallet_open", "wallet_unlocked"],
          "aliases" : [ "encryptwallet" ]
      },
      {
          "method_name" : "bitcoin_addnode",
          "description": "Attempts add or remove <node> from the peer list or try a connection to <node> once, see network_add_node",
          "return_type": "void",
          "parameters" :
          [
          {
              "name" : "node",
              "type" : "ip_endpoint",
              "description" : "The node (see network_get_peer_info for nodes)",
              "example" : "192.168.1.5:5678"
          },
          {
              "name" : "command",
              "type" : "std::string",
              "description" : "'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once",
              "example" : "add"
          }
          ],
          "prerequisites" : ["json_authenticated"],
          "aliases" : [ "addnode" ]
      },
      {
          "method_name": "bitcoin_backupwallet",
          "description": "Safely backup wallet data to destination, which can be a directory or a path with filename.",
          "return_type": "void",
          "parameters" :
          [
            {
              "name" : "destination",
              "type" : "filename",
              "description" : "the full path and filename of wallet file to generate",
              "example" : "/path/to/backup_wallet.json"
            }
          ],
          "is_const" : true,
          "prerequisites" : ["json_authenticated", "wallet_open"],
          "aliases" : [ "backupwallet" ]
      },
      {
          "method_name": "bitcoin_getaddressesbyaccount",
          "description": "Returns the list of addresses for the given account.",
          "return_type": "address_list",
          "parameters" :
          [
            {
              "name" : "account_name",
              "type" : "account_name",
              "description" : "the account's name associated with this address list"
            }
          ],
          "prerequisites" : ["json_authenticated", "wallet_open"],
          "aliases" : [ "getaddressesbyaccount" ]
      },
      {
          "method_name": "bitcoin_getbalance",
          "description": "If [account] is not specified, returns the server's total available balance.\nIf [account] is specified, returns the balance in the account.",
          "return_type": "amount",
          "parameters" :
          [
          {
              "name" : "account_name",
              "type" : "receive_account_name",
              "description" : "The account to list the balance of.",
              "default_value" : "*"
          }
          ],
          "prerequisites" : ["json_authenticated"],
          "aliases" : [ "getbalance" ]
      },
      {
          "method_name": "bitcoin_getblock",
          "description": "eturns information about the block with the given hash.",
          "return_type": "digest_block",
          "parameters" : [
          {
              "name" : "block_id",
              "type" : "block_id_type",
              "description" : "the id of the block to return"
          }
          ],
          "is_const" : true,
          "prerequisites" : ["json_authenticated"],
          "aliases" : [ "getblock" ]
      },
      {
          "method_name": "bitcoin_getblockcount",
          "description": "Returns the number of blocks in the longest block chain",
          "return_type": "uint32_t",
          "parameters" : [],
          "is_const" : true,
          "prerequisites" : ["no_prerequisites"]
      },
      {
          "method_name": "bitcoin_getblockhash",
          "description": "Returns hash of block in best-block-chain at index provided",
          "return_type": "block_id_type",
          "parameters" :
          [
          {
              "name" : "block_number",
              "type" : "uint32_t",
              "description" : "index of the block",
              "example" : "42"
          }
          ],
          "is_const" : true,
          "prerequisites" : ["no_prerequisites"]
      },
      {
          "method_name": "bitcoin_getconnectioncount",
          "description": "Returns the number of fully-established connections to other nodes",
          "return_type": "uint32_t",
          "parameters" : [],
          "is_const"   : true,
          "prerequisites" : ["json_authenticated"]
      },
      {
          "method_name": "bitcoin_getinfo",
          "description": "Returns an object containing various state info.",
          "return_type": "json_object",
          "parameters" : [],
          "is_const"   : true,
          "prerequisites" : ["no_prerequisites"]
      },
      {
          "method_name": "bitcoin_getnewaddress",
          "description": "Returns a new bitcoin address for receiving payments. If [account] is specified payments received with the address will be credited to [account].",
          "return_type": "address",
          "parameters" :
          [
          {
              "name" : "account_name",
              "type" : "account_name",
              "description" : "the name you will use to refer to this receive account",
              "enable_autocomplete" : false
          }
          ],
          "prerequisites" : ["json_authenticated", "wallet_open", "wallet_unlocked"],
          "aliases" : [ "getnewaddress" ]
      },
      {
          "method_name": "bitcoin_getreceivedbyaddress",
          "description": "Returns the amount received by <bitcoinaddress> in transactions. It correctly handles the case where someone has sent to the address in multiple transactions. ",
          "return_type": "amount",
          "parameters" :
          [
          {
              "name" : "account_address",
              "type" : "address",
              "description" : "The received address"
          }
          ],
          "prerequisites" : ["json_authenticated", "wallet_open"],
          "aliases" : [ "getreceivedbyaddress" ]
      },
      {
          "method_name": "bitcoin_importprivkey",
          "description": "Adds a private key (as returned by dumpprivkey) to your wallet. This may take a while, as a rescan is done, looking for existing transactions, see wallet_dump_private_key.",
          "return_type": "void",
          "parameters" : [
          {
              "name" : "wif_key",
              "type" : "wif_private_key",
              "description" : "A private key in bitcoin Wallet Import Format (WIF)"
          },
          {
              "name" : "account_name",
              "type" : "account_name",
              "description" : "the name of the account the key should be imported into, if null then the key must belong to an active account",
              "default_value" : null
          },
          {
              "name" : "rescan",
              "type" : "bool",
              "description" : "If true, the wallet will rescan the blockchain looking for transactions that involve this private key",
              "default_value" : true
          }
          ],
          "prerequisites" : ["json_authenticated","wallet_open","wallet_unlocked"],
          "aliases" : ["importprivkey"]
      },
      {
          "method_name"    : "bitcoin_listaccounts",
          "description"    : "Returns Object that has account names as keys, account balances as values. TODO: balance in result type is asset",
          "return_type"    : "map< account_name, share_type >",
          "parameters"     : [],
          "prerequisites"  : ["json_authenticated","wallet_open"],
          "aliases" : ["listaccounts"]
      },
      {
          "method_name": "bitcoin_listtransactions",
          "description": "Returns up to [count] most recent transactions skipping the first [from] transactions for account [account]. If [account] not provided it'll return recent transactions from all accounts.",
          "return_type": "pretty_transactions",
          "parameters" :
          [
          {
              "name" : "account_name",
              "type" : "account_name",
              "description" : "the name of the account for which the transaction history will be returned",
              "example" : "alice",
              "default_value" : ""
          },
          {
              "name" : "count",
              "type" : "size",
              "description" : "the number of transactions will be returned",
              "example" : "10",
              "default_value" : 10
          },
          {
              "name" : "from",
              "type" : "size",
              "description" : "the position of transaction will be skipped from",
              "example" : "0",
              "default_value" : 0
          }
          ],
          "prerequisites" : ["json_authenticated","wallet_open"],
          "aliases" : ["listtransactions"]
      },
      {
          "method_name": "bitcoin_sendfrom",
          "description": "TODO: <amount> is a real and is rounded to 8 decimal places. Will send the given amount to the given address, ensuring the account has a valid balance using [minconf] confirmations. Returns the transaction ID if successful (not in JSON object).",
          "return_type": "transaction_id",
          "parameters" :
          [
          {
              "name" : "fromaccount",
              "type" : "sending_account_name",
              "description" : "the source account(s) to draw the shares from"
          },
          {
              "name" : "toaddress",
              "type" : "address",
              "description" : "the address to send"
          },
          {
              "name" : "amount",
              "type" : "amount",
              "description" : "the amount of shares to transfer"
          },
          {
              "name" : "comment",
              "type" : "std::string",
              "description" : "a memo to store with the transaction",
              "default_value" : ""
          }
          ],
          "prerequisites" : ["json_authenticated", "wallet_open", "wallet_unlocked" ],
          "aliases" : ["sendfrom"]
      },
      {
          "method_name": "bitcoin_sendmany",
          "description": "amounts are double-precision floating point numbers",
          "return_type": "transaction_id",
          "parameters" :
          [
          {
              "name" : "fromaccount",
              "type" : "sending_account_name",
              "description" : "the source account(s) to draw the shares from"
          },
          {
              "name" : "to_address_amounts",
              "type" : "map< address, amount >",
              "description" : "the public_key to send"
          },
          {
              "name" : "comment",
              "type" : "std::string",
              "description" : "a memo to store with the transaction",
              "default_value" : ""
          }
          ],
          "prerequisites" : ["json_authenticated", "wallet_open", "wallet_unlocked" ],
          "aliases" : ["sendmany"]
      },
      {
          "method_name": "bitcoin_sendtoaddress",
          "description": "<amount> is a real and is rounded to 8 decimal places. Returns the transaction ID <txid> if successful.",
          "return_type": "transaction_id",
          "parameters" :
          [
          {
              "name" : "address",
              "type" : "address",
              "description" : "the address to send"
          },
          {
              "name" : "amount",
              "type" : "amount",
              "description" : "the amount of shares to transfer"
          },
          {
              "name" : "comment",
              "type" : "std::string",
              "description" : "a memo to store with the transaction",
              "default_value" : ""
          }
          ],
          "prerequisites" : ["json_authenticated", "wallet_open", "wallet_unlocked" ],
          "aliases" : ["sendtoaddress"]
      },
      {
          "method_name": "bitcoin_settrxfee",
          "description": "<amount> is a real and is rounded to the nearest 0.00000001.",
          "return_type": "void",
          "parameters" :
          [
          {
              "name" : "amount",
              "type" : "amount",
              "description" : "the amount of the fee"
          }
          ],
          "prerequisites" : ["json_authenticated", "wallet_open", "wallet_unlocked" ],
          "aliases" : ["settrxfee"]
      },
      {
          "method_name": "bitcoin_signmessage",
          "description": "Sign a message with the private key of an address.",
          "return_type": "std::string",
          "parameters" :
          [
          {
              "name" : "address",
              "type" : "address",
              "description" : "the address of the private key"
          },
          {
              "name" : "message",
              "type" : "std::string",
              "description" : "the massage to sign"
          }
          ],
          "prerequisites" : ["json_authenticated", "wallet_open", "wallet_unlocked" ],
          "aliases" : ["signmessage"]
      },
      {
          "method_name": "bitcoin_validateaddress",
          "description": "Return information about <address>.",
          "return_type": "variant",
          "parameters" :
          [
          {
              "name" : "address",
              "type" : "address",
              "description" : "the address of the private key"
          }
          ],
          "prerequisites" : ["json_authenticated", "wallet_open"],
          "aliases" : ["validatemessage"]
      },
      {
          "method_name": "bitcoin_verifymessage",
          "description": "Verify a signed message.",
          "return_type": "bool",
          "parameters" :
          [
          {
              "name" : "address",
              "type" : "address",
              "description" : "the address of the private key"
          },
          {
              "name" : "signature",
              "type" : "std::string",
              "description" : "the signature of the massage"
          },
          {
              "name" : "message",
              "type" : "std::string",
              "description" : "the massage signed"
          }
          ],
          "prerequisites" : ["json_authenticated", "wallet_open"],
          "aliases" : ["verifymessage"]
      },
      {
          "method_name": "bitcoin_walletlock",
          "description": "Removes the wallet encryption key from memory, locking the wallet. After calling this method, you will need to call walletpassphrase again before being able to call any methods which require the wallet to be unlocked.",
          "return_type": "void",
          "parameters" : [],
          "prerequisites" : ["json_authenticated", "wallet_open"],
          "aliases" : ["walletlock"]
      },
      {
          "method_name": "bitcoin_walletpassphrase",
          "description": "Stores the wallet decryption key in memory for <timeout> seconds.",
          "return_type": "void",
          "parameters" :
          [
          {
              "name" : "passphrase",
              "type" : "passphrase",
              "description" : "the passphrase for encrypting the wallet"
          },
          {
              "name" : "timeout",
              "type" : "time_interval_in_seconds",
              "description" : "the number of seconds to keep the wallet unlocked"
          }
          ],
          "prerequisites" : ["json_authenticated", "wallet_open"],
          "aliases" : ["walletpassphrase"]
      },
      {
          "method_name": "bitcoin_walletpassphrasechange",
          "description": "Changes the wallet passphrase from <oldpassphrase> to <newpassphrase>",
          "return_type": "void",
          "parameters" :
          [
          {
              "name" : "oldpassphrase",
              "type" : "passphrase",
              "description" : "the old passphrase for encrypting the wallet"
          },
          {
              "name" : "newpassphrase",
              "type" : "passphrase",
              "description" : "the new passphrase for encrypting the wallet"
          }
          ],
          "prerequisites" : ["json_authenticated", "wallet_open"],
          "aliases" : ["walletpassphrasechange"]
      }
     ]

}
